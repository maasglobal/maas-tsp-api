openapi: 3.0.0
servers:
  - url: http://localhost:3000
    description: Local server
info:
  version: 1.1.0
  title: WhimApp TSP API
  ## NB: All Markdown paragraphs need to be 2 empty lines and all Markdown links must be resolved against repo root (not against this file path)
  ## Also x-logo must be resolved against repo root (not against this file path)
  ## Examples (externalValue) and $ref are resolved relative to this file path
  description: |
    ## Introduction

    This is an API specification of REST endpoints that a Transport Service
    Provider (TSP) should implement to offer their services through the 
    [Whim application](https://whimapp.com/).

    It is written in machine-readable [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format, 
    so that API endpoints, validators, and test clients can be generated from the
    documentation.

    ### Download 

    * OpenAPI Specification [JSON, single file document](./specs/booking.json)
    * OpenAPI Specification [YAML](./specs/booking.yml)

    ## Terminology

    * **endpoint** Publically resolvable URL either managed by MaaS Global (Whim Backend API) or by TSP (Booking API).

    * **booking** Information about single leg during the customer trip, together with customer information and state.

    * **journey** Multi-leg trip which user plans via WhimApp.

    * **leg** Single trip which is performed by TSP. Booking created and contain the state of this trip.

    * **TSP** Transport service provider. MaaS Global partner which offers their services via WhimApp.

    * **route** One of the possible journey. To determine it, we call TSP booking options endpoint to get available offers.

    * **micromobility** Light vehicles such as electric scooters, shared bicycles and electric bicycles.

    * **WhimApp** Mobile application or similar, which is used by Whim User to perform journeys. Collectively we treat all communication from the point of WhimApp and user experience during the time the user interacts with the application.

    * **Whim backend** Caller of TSP API endpoints. WhimApp never calls TSP endpoints directly. All invocations are done from cloud-native infrastructure managed by MaaS Global.

    * **MaaS Global** MaaS Global is the world’s first true Mobility-as-a-Service (MaaS) operator with its award-winning Whim app, which provides users all city transport services in one app.

    ## Versions

    ### 1.0.0 Initial release (2018)

    **deprecated**
      
      * [OpenAPI Specification](specs/maas-v1.yml)
      * [Documentation](?maas-v1.yml)
      * [SwaggerUI](swagger-ui.html?urls.primaryName=maas-v1.yml)
      * Source code [repository](https://github.com/maasglobal/maas-tsp-api/tree/v1.0)

    ### 1.1.0 Latest version

      * [OpenAPI Specification](specs/booking.json)
      * [Documentation](?booking.json)
      * [SwaggerUI](swagger-ui.html?urls.primaryName=booking.yml)
      * Source code [repository](https://github.com/maasglobal/maas-tsp-api/)

    ## Getting started

    ### Running a local documentation server

    To run local documentation server, follow the instructions in the [GitHub repo](https://github.com/maasglobal/maas-tsp-api/)

        git clone https://github.com/maasglobal/maas-tsp-api/
        cd maas-tsp-api
        npm install
        npm start

    Open your browser and navigate to http://localhost:3000

    > ⚠️ You can change a port by specifying `PORT` env variable

  contact:
    name: Maas Global Team
    email: tech@maas.global
    url: 'https://github.com/maasglobal/maas-tsp-api'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  x-logo:
    url: 'assets/whim-logo.svg'
    altText: 'Whim logo'
    href: 'https://whimapp.com'
tags:
  - name: Booking lifecycle
    description: |
      The following scenario explains the life-cycle of an individual journey from a TSP viewpoint. Whenever a new concept (such as an actor or action is represented, it is imprinted in **bold**.

      This scenario, with a few extra details, is shown in the process diagram below. It should be noted from the picture that MaaS more often acts as a caller than a callee for Transport Service Provider. 

      The cases of how WhimApp interacts with TSP are depicted in 
      [business process diagram](https://cawemo.com/embed/09a7739f-f8ce-4fe4-a5e5-a8f66ecedb8c)

      [![Business process diagram](./specs/maas-v1-overall.svg)](https://cawemo.com/embed/09a7739f-f8ce-4fe4-a5e5-a8f66ecedb8c)

      ## Booking explained

      Booking represents state about one leg of a journey, connected with TSP specific information and state.

      Data model as specified by [JSON Schema](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/core/booking.json) allows representing information about any type of transport and state. To better understand how the booking works, let's take a look at the basic states and essential parts of the booking data.

      ### State

      Booking goes through multiple states during the journey; here are the most important states. Please see [Tracking booking](#section/Tracking-booking) on information on how WhimApp and TSP exchange this information.

      | State | Description |
      |-----|------|
      | **RESERVED** | Booking created by calling [Create booking](#operation/bookingCreate) endpoint. |
      | **CONFIRMED** | Booking confirmed, e.g. TAXI driver have accepted this order. We are waiting for this state update from TSP by periodically calling [Get booking](#operation/bookingGet) or waiting for webhook invocation via [Update booking state](#operation/backendBookingReceive) endpoint invocation. |
      | **ARRIVED** | Not applicable for all modes of transportation. For TAXI means driver have arrived to the pickup point. We are waiting for this state update from TSP. |
      | **ACTIVATED** | Booking has started. For TAXI means TAXI has picked up the passenger. We are waiting for this state update from some TSPs e.g. Taxi and will send this state update via [Update booking](#operation/bookingUpdate) call for car sharing and micromobility providers (to unlock car or a scooter and start a ride). |
      | **ON_HOLD** | Booking still active but have been paused, for example for Car Sharing - lock the car but not finish the ride. We will send this state update via [Update booking](#operation/bookingUpdate) call. | 
      | **FINISHED** | Ride was completed. We are waiting for this state update from TSP. |
      | **CANCELLED** | Cancelled by user. Booking can be subject to a fee or/and not be refundable as specified by TSP in booking cancellation rules. |
      | **REJECTED** | Rejected by TSP. We can update with this state on **PENDING**, **RESERVED**, **CONFIRMED**, **ACTIVATED** state and show User message about the reason for rejection, as received from TSP. |

      ### Taxi state

      Flow for taxi, both for on-call and prebooking PHV (private hire vehicles) are shown below.

      ![Taxi workflow](./specs/workflow/taxi.svg)

      ### Bike state

      State flow for bike, scooter and other micromobility are shown below.

      ![Bike workflow](./specs/workflow/bike.svg)

      ### Structure

      See examples for a [Create booking](#operation/bookingCreate) or schema for [Booking create](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-create) to understand all available data in a booking.

      Here are the most essential parts of the booking data.

      | State | Required? | Description |
      |-----|------|------| 
      | `leg.from` | Y | Pickup point with name, address and coordinates (lat, long) |
      | `leg.to` | N | Destination point with name, address and coordinates (lat, long) |
      | `leg.startTime` | N | Start time of a trip, may be in future. |
      | `leg.endTime` | N | End time of a trip, must be in future. |
      | `leg.mode` | Y | Requested mode of transportation, i.e. TAXI |
      | `customer` | Y | Customer information |
      | `state` | Y | State of the booking |
      | `meta` | Y | Information about TSP. Also contains driver for TAXI |
      | `tspId` | Y | TSP specifid ID for this booking |
      | `cost` | Y | Amount and currency this booking cost |

      ## Planning a route

      **User** **queries** for a **Route** with an address or latitude-longitude pair from one place to another. WhimApp queries the route from a third party **Routing Engine** that contains the data for **TSP** routes. At this point, WhimApp makes no queries to the TSP - it expects the Routing Engine contains valid GTFS data for the TSP.

      > ⚠️ Routing and GTFS are used only if applicable for TSP provider. For example, for micromobility providers, we don't use GTFS and route planning.

      **WhimApp** shows several possible **Plans**, each containing a valid **Route** with several **Legs** with a part of a route using a specific TSP.

      ## Booking options

      To determine available mobility services, WhimApp calls [Available options](#operation/bookingOptionsGet) endpoint. Depending on the TSP mode of transportation, this endpoint returns available TAXIs or cars or bikes for the specified location. After User selection, one of the options is used to create a booking by calling [Create Booking](#operation/bookingCreate) endpoint.

      | Related API   | Related schemas | Examples | 
      | --------- | --------- | ------ |
      | [Available options](#operation/bookingOptionsGet) | [tsp/booking-options-list](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-options-list) |  TAXI - [response](examples/taxi/booking-options-response.json), SCOOTER - [response](examples/scooter/booking-options-response.json) |

      ## Creating a booking

      The User browses through the plans and chooses to book a journey. For each Leg in the Plan Route, WhimApp creates a new booking by invoking the corresponding endpoint in TSP.

      It should be noted that the booking may be hours or days in advance - a bit like in booking a hotel. The booking contains the individual leg as the detailed travel plan for the TSP, as well as customer contact information.

      > ⚠️ Specific parts of customer information (E-mail, Phone, Last name, First name, etc.) which are sent to the TSP are subject to agreement between MaaS Global and TSP.

      TSP receives the booking and confirms the trip. TSP may modify the details
      of the booking, such as moving the **start location** to closest known
      street address or delaying the Leg **start time**, as long as the
      **end time** can be guaranteed. The booking is supplemented with
      **booked** state information and additional **terms** such as
      the latest **cancellation rules**.

      WhimApp checks that the creation of booking succeeded and stores the booking for future reference.

      > ⚠️ User can also book a trip directly for the TAXI, car or micromobility transport (which will result in a journey with one leg)

      | Related API   | Related schemas | Examples | 
      | --------- | --------- | ------ |
      | [Create Booking](#operation/bookingCreate) | [tsp/booking-create](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-create) |  TAXI - [request](examples/taxi/booking-create-request.json), [response](examples/taxi/booking-create-response.json), SCOOTER - [request](examples/scooter/booking-create-request.json), [response](examples/scooter/booking-create-response.json) |

      ## Paying a booking

      When booking created, it is already paid according to the options received and selected by User. See [Booking options](#section/Booking+options) for more information.

      If the booking can not be created, the paid amount will be refunded to the User.

      ## Navigating a route

      The User starts to navigate the Route. WhimApp tracks for the user location to know if there are any changes needed in the plan. WhimApp triggers the changes for bookings by monitoring the individual legs.

      WhimApp monitors the booking terms and Leg **start time**. When the actual Leg starts, WhimApp **starts** the Leg and notifies the TSP. User or TSP may request changes to the booking, e.g., in a case of a delay or cancellation.

      Each of these scenarios is described below.

      ## Updating a booking

      A booking may be updated by a User or WhimApp when any party receives new information that the Leg needs to be changed. For example, when the User wants to change a destination. Such change may be subject to a fee, which should be reflected in response to update or when new booking retrieved via [Get booking](#operation/bookingGet) endpoint.

      | Related API   | Related schemas | Examples | 
      | --------- | --------- | ------ |
      | [Update booking](#operation/bookingUpdate) | [tsp/booking-update](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-update) |  SCOOTER, finish a ride - [request](examples/scooter/booking-update-expired-request.json), [response](examples/scooter/booking-update-expired-response.json), CAR - [request lock](examples/car/booking-update-request-lock.json), [request unlock](examples/car/booking-update-request-unlock.json) |

      ## Cancelling a booking

      A booking may be canceled by User or WhimApp as specified by **cancellation rules** in **terms** of the booking. WhimApp invokes a [Cancel booking](#operation/bookingCancel) endpoint. TSP confirms and updates its own systems. If TSP can not cancel booking, it returns a 403 Forbidden error.

      It should be noted that cancellation is an exceptional case and is likely happen only when the user chooses to cancel the whole route Plan.

      | Related API   | Related schemas | Examples | 
      | --------- | --------- | ------ |
      | [Cancel booking](#operation/bookingCancel) | [tsp/booking-cancel](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-cancel) |  - |

      ## Tracking a booking

      To provide a smooth user experience, it is very important to keep the booking state updated on the WhimApp side. To do this, we can use two approaches:

      * We periodically check booking state, by calling [Get booking](#operation/bookingGet) endpoint
      * TSP sends us latest update, by calling Whim Backend endpoint [Update booking state](#operation/backendBookingReceive)

      While the latter is preferred way, MVP implementation can be created by only providing **required** [Get booking](#operation/bookingGet) endpoint.

      | Related API   | Related schemas | Examples | 
      | --------- | --------- | ------ |
      | [Get booking](#operation/bookingGet) | [tsp/booking-read-by-id](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-read-by-id) | TAXI - [RESERVED](examples/taxi/booking-read-by-id-response.json), [ACTIVATED](examples/taxi/booking-read-by-id-response-activated.json), SCOOTER - [ACTIVATED](examples/scooter/booking-read-by-id-response-activated.json) |
      | [Update booking state](#operation/backendBookingReceive) | [tsp/booking-read-by-id](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-read-by-id) | - |
      | [Get receipt](#operation/bookingGetReceipt) | - | SCOOTER - [response](examples/scooter/booking-receipt-response.json) | 

      ## Error Cases

      It may be possible that WhimApp sends an invalid request, or the TSP cannot fulfill a request. In any such case, TSP may respond with an error. If TSP responds with an error, WhimApp assumes the state was not changed (e.g., a transaction was rolled back). WhimApp may repeat the request with the same or different data later on.

      The same principle applies when TSP is communicating with WhimApp.

      The error response body are defined as JSON in [JSON Schema](https://maasglobal.github.io/maas-schemas/html/core/error.html#code) and can contain additional fields, e.g.

      ```json
      {
        code: "BOOKING_ALREADY_EXISTS",
        message: "Active booking already exists for this user.",
        bookingId: "deadbeefdeadbeefdeadcafe0000"
      }
      ```
    x-traitTag: true
  - name: Booking
    description: |
      Booking related APIs are the core of a TSP implementation.

      Correspondingly, a booking is the main object exchanged between WhimApp and a
      TSP. For more information about booking, see [Booking explained](#section/Booking-explained)
    x-traitTag: false
    x-displayName: Booking API
  - name: WebHook
    description: |
      Publically available API which you can call to send booking state changes immediately when they happen, without the need to for us to poll our system by calling [Get booking](#operation/bookingGet) multiple times.

      These endpoints are treated as Webhooks, which TSP **may** call to make communication faster and booking process smoother.

      > ⚠️ The specific endpoint URL to be invoked are subject to agreement between TSP and MaaS Global.
    x-traitTag: false
    x-displayName: Whim Backend API
  - name: Support
    description: |
      We would like to help you with code and other questions you might have.

      Search our documentation, contact our [tech  team](mailto:tech@maas.global), or connect with our [sales team](https://whimapp.com/partners/).

      ### Improving documentation

      It would be great if you have anything to contribute to our documentation, you can do it by creating a fork and issuing a pull-request.

      Or you can file an [issue](https://github.com/maasglobal/maas-tsp-api/issues) if you discover some problem or invalid information.

      You also can reach the team via tech@maas.global
    x-traitTag: true
    x-displayName: Support
components:
  securitySchemes:
    apiKeyHeader:
      in: header
      name: X-API-Key
      type: apiKey
      description: |
        Authorization scheme to use with TSP API should be based on specifying `X-API-Key` header when WhimApp makes a request to the TSP API.

        *Please note* what due to serverless nature of our infrastructure we are unable to provide you with a set of IP addresses HTTP request will be originating from.
security:
  - apiKeyHeader: []
paths:
  /bookings/options:
    get:
      operationId: bookingOptionsGet
      summary: Available options
      description: |
        Returns available options or offers.

        The options are used to construct a booking to be created after the User selects it by calling [Create booking](#operation/bookingCreate).

        Full schema for parameters defined in [maas-schemas](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-options-list/request.json) project
      tags:
        - Booking
      parameters:
        - name: from
          description: "User's location in comma separated form e.g. 60.123,27.456"
          in: query
          required: true
          schema:
            $ref: ../schemas/core/components/units-geo.json#/definitions/shortLocationString
        - name: to
          description: 'A desired destination e.g. 60.123,27.456'
          in: query
          required: false
          schema:
            $ref: ../schemas/core/components/units-geo.json#/definitions/shortLocationString
        - name: startTime
          description: 'Start journey time'
          in: query
          required: true
          schema:
            $ref: ../schemas/core/components/units.json#/definitions/time
        - name: endTime
          description: 'End journey time'
          in: query
          required: false
          schema:
            $ref: ../schemas/core/components/units.json#/definitions/time
        - name: mode
          description: 'Transfer mode'
          in: query
          required: false
          schema:
            $ref: ../schemas/core/components/travel-mode.json
      x-code-samples:
        - lang: Shell
          label: Query for taxi
          source: |
            curl --location --request GET 'http://localhost:3000/bookings/options? \
              customer[clientId]=whim&customer[locale]=en& \
              customer[opaqueId]=deadbeef-deadbeef& \
              customer[phone]=+35840000000& \
              distance=9734&endTime=1572347575000& \
              from=60.1769789,24.9504135& \
              fromAddress=streetName:Siltasaarenkatu|streetNumber:1|city:Helsinki|zipCode:00530|country:Suomi&fromName=Siltasaarenkatu%201%20Helsinki& \
              mode=TAXI& \
              startTime=1572347575000& \
              tspProductIds=testtaxi1-product1& \
              to=60.23044350000001,24.8990183& \
              toAddress=streetName:Ida%20Aalbergin%20tie|streetNumber:3|city:Helsinki|zipCode:00400|country:Suomi& \
              toName=Ida%20Aalbergin%20tie%203%20Helsinki' \
                --header "x-api-key: pieY8Oezeicioyei5eisheeb7sheeLie"
        - lang: Shell
          label: Query for scooter
          source: |
            curl --location --request GET 'http://localhost:3000/bookings/options? \
              customer[clientId]=whim&customer[locale]=en& \
              customer[opaqueId]=deadbeef-deadbeef& \
              customer[phone]=+358400001010& \
              customer[firstName]=Tester& \
              customer[lastName]=Test& \
              endTime=1577969729830& \
              from=60.1769789,24.9504135& \
              fromRadius=400& \
              mode=SCOOTER& \
              tspProductIds=scooterinc1& \
              startTime=1577966129830& \
              to=60.1769789,24.9504135&' \
                --header "x-api-key: pieY8Oezeicioyei5eisheeb7sheeLie"
      responses:
        '200':
          x-summary: Array of options
          description: |
            Available transport options matching the given query parameters. If no transport options are available; an empty array is returned.
          content:
            application/json:
              schema:
                $ref: ../schemas/tsp/booking-options-list/response.json
              examples:
                Taxi:
                  summary: Taxi
                  externalValue: '../examples/taxi/booking-options-response.json'
                Scooter:
                  summary: Scooter
                  externalValue: '../examples/scooter/booking-options-response.json'
  /bookings:
    post:
      operationId: bookingCreate
      summary: Create booking
      description: |
        Creates a new booking for the TSP in **RESERVED** state. 

        The returned object will be a reference that is passed back & forth throughout the booking lifecycle.

        Booking request are based upon the response returned by calling [Available options](#operation/bookingOptionsGet) endpoint.

        The booking may be modified in the response, e.g., the location can be adjusted for a more suitable pick-up location.

        In addition, the service may contain a **meta** attribute for arbitrary TSP metadata that the TSP needs later, and **token** attribute depicting how long the current state is valid.

        ### JSON Schema documentation

        Full schema for parameters defined in [maas-schemas](https://github.com/maasglobal/maas-schemas/blob/develop/maas-schemas/schemas/tsp/booking-create/request.json) project
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/tsp/booking-create/request.json
            examples:
              Taxi:
                summary: Taxi
                externalValue: ../examples/taxi/booking-create-request.json
              Scooter:
                summary: Scooter
                externalValue: ../examples/scooter/booking-create-request.json
        description: |
          Parameters of booking to be created, optionally referencing 
          offerId returned on the `/bookings/options` call.
        required: true
      responses:
        '200':
          x-summary: Booking
          description: |
            Booking information. For more information about the booking, see [Booking explained](#section/Booking-explained).
          content:
            application/json:
              schema:
                $ref: ../schemas/tsp/booking-create/response.json
              examples:
                Taxi:
                  summary: Taxi
                  externalValue: ../examples/taxi/booking-create-response.json
                Scooter:
                  summary: Scooter
                  externalValue: ../examples/scooter/booking-create-response.json
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '409':
          description: |
            Another Booking exists for this User.

            If TSP does not support more than one booking per user, it can indicate it by sending this response when 
            WhimApp creates a new booking. Booking ID can be specified as an extra property in a response. See [Error Cases](#section/Error-Cases) for more information.
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
  /bookings/{tspId}:
    get:
      operationId: bookingGet
      summary: Get booking
      description: Returns the booking that has been created earlier.
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        '200':
          description: The booking matching the query
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
              examples:
                Taxi1:
                  summary: Taxi - RESERVED
                  externalValue: '../examples/taxi/booking-read-by-id-response.json'
                Taxi2:
                  summary: Taxi - ACTIVATED
                  externalValue: '../examples/taxi/booking-read-by-id-response-activated.json'
                Scooter:
                  summary: Scooter - ACTIVATED
                  externalValue: '../examples/scooter/booking-read-by-id-response-activated.json'
        '400':
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
    patch:
      operationId: bookingUpdate
      summary: Update booking
      description: |
        Update booking, changing state, or changing booking details.
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/tsp/booking-update/request.json
            examples:
              carSharingUnlock:
                summary: Unlock a car
                externalValue: ../examples/car/booking-update-request-unlock.json
              carSharingLock:
                summary: Lock a car
                externalValue: ../examples/car/booking-update-request-lock.json
              scooterReturn:
                summary: Return scooter
                externalValue: ../examples/scooter/booking-update-expired-request.json
      responses:
        '200':
          description: Updated, old booking returned
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        '204':
          description: Updated, no content returned
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
    delete:
      operationId: bookingCancel
      summary: Cancel booking
      description: |
        Cancel booking if it is possible.

        Cancel can be subject to a fee, as returned by 200 OK response to this method.
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        '200':
          description: Deleted, old booking returned
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
        '204':
          description: Deleted, no content returned
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '403':
          description: Cancellation forbidden
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
  /bookings/{tspId}/receipt:
    get:
      operationId: bookingGetReceipt
      summary: Get final booking receipt
      description: |
        Get finalized pricing and receipt for the booking.
      tags:
        - Booking
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      responses:
        '200':
          description: The bookings matching the query with final receipt
          content:
            application/json:
              schema:
                $ref: ../schemas/core/booking.json
              examples:
                Scooter:
                  summary: Scooter
                  externalValue: '../examples/scooter/booking-receipt-response.json'
        '400':
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        '404':
          description: Receipt not ready
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
  /backend/booking/{tspId}:
    patch:
      operationId: backendBookingReceive
      summary: Update booking state
      description: |
        Updates booking information at the WhimApp backend. 

        It is called by the TSP whenever the state of the booking are updated.
      parameters:
        - name: tspId
          description: ID of the booking created earlier
          in: path
          required: true
          schema:
            $ref: ../schemas/core/booking.json#/definitions/tspId
      tags:
        - WebHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../schemas/tsp/booking-read-by-id/response.json
            examples:
              Taxi:
                summary: Taxi
                externalValue: '../examples/taxi/booking-read-by-id-response-activated.json'
        description: |
          Booking information with updated state.
        required: true
      responses:
        '204':
          x-summary: Acknowledged
          description: |
            Received, no state.
        '400':
          description: Bad request (data failed validation)
          content:
            application/json:
              schema:
                $ref: ../schemas/core/error.json
